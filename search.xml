<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>深入学习bode图的使用</title>
    <url>/SSSnow.github.io/2020/03/12/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0bode%E5%9B%BE%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>大江东去 浪淘尽 千古风流人物</p>
<p>问苍茫大地 谁主沉浮 还看今朝</p>
</blockquote>
<p><img src="/SSSnow.github.io/2020/03/12/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0bode%E5%9B%BE%E7%9A%84%E4%BD%BF%E7%94%A8/header.png" alt></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    本文主要记录在伯德图上使用的心得以及感悟。</p>
<a id="more"></a>
<h2 id="闭环控制系统"><a href="#闭环控制系统" class="headerlink" title="闭环控制系统"></a>闭环控制系统</h2><p>​    一般的系统均有以下结构,其中<strong>C</strong>指的是控制器，<strong>P</strong>指的是被控对象，<strong>r</strong>表示输入指令，<strong>y</strong>表示系统的输出状态，<strong>u</strong>表示控制量，<strong>d</strong>表示外部扰动，<strong>n</strong>表示测量噪声，<strong>e</strong>为误差信号，注意这里执行机构统一归属于被控对象不单独列出。</p>
<p><img src="/SSSnow.github.io/2020/03/12/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0bode%E5%9B%BE%E7%9A%84%E4%BD%BF%E7%94%A8/control_system.png" alt></p>
<p>这里将闭环传递函数分为表示成$y = F(r, n, d)$的函数形式，便于对闭环控制进行理论分析，其中<strong>T</strong>所表示区域称为互补灵敏度或者传输性，<strong>S</strong>所表示的区域称为扰动的灵敏度同时也是误差的灵敏度。</p>
<h3 id="二阶阻尼系统分析"><a href="#二阶阻尼系统分析" class="headerlink" title="二阶阻尼系统分析"></a>二阶阻尼系统分析</h3><p>​    对于LTI系统的二阶形式一般可以用以下形式描述</p>
<script type="math/tex; mode=display">
G(s) = \frac{w_n^2}{s^2 + 2\zeta w_ns +w_n^2}</script>]]></content>
      <categories>
        <category>控制系统</category>
      </categories>
      <tags>
        <tag>经典控制理论</tag>
        <tag>bode图</tag>
      </tags>
  </entry>
  <entry>
    <title>控制系统调节</title>
    <url>/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>看海和出海是两种不同的人生境界</p>
<p>一种把眼睛给了海，一种把生命给了海</p>
</blockquote>
<p><img src="/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/header.png" alt></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    本文主要记录如何使用<strong>Control System Tuner</strong>进行控制系统调节，以及其中的注意事项。</p>
<a id="more"></a>
<h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><p>​    该工具用于调节固定结构的控制系统，适用于单回路和多回路调节，能有效提高传统的单回路调节效率。</p>
<h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><ol>
<li>通过构建具有固定值的模块和可调参的模块来定义你的控制系统框架。可以通过以下几种方式。<ul>
<li>创建控制系统的Simulink模型</li>
<li>从<strong>Control System Tuner</strong>使用一个预定义的控制器框架</li>
<li>在命令行中，用数字 LTI 模型和可调控制设计块构建控制系统的可调 广义的状态空间模型(genss)</li>
</ul>
</li>
<li>设置一个用于调优的模型<ul>
<li>在<strong>Control System Tuner</strong>，确定要优化模型的哪些块。</li>
<li>如果在命令行调优 Simulink 模型，则创建并配置模型的 slTuner 接口。</li>
</ul>
</li>
<li>指定您的调优目标。 使用调优目标库来捕获需求，比如引用跟踪、干扰抑制、稳定边界等等<ul>
<li>在<strong>Control System Tuner</strong>中，使用图形界面指定调优目标。</li>
<li>在命令行中，使用 TuningGoal 需求对象来指定优化目标。</li>
</ul>
</li>
<li>调整模型。 使用系统命令或控制系统调谐器来优化控制系统的可调参数，以最好地满足指定的调优目标。 然后，对调谐系统响应进行分析，并对设计进行验证。 无论是在命令行还是在 Control System Tuner 中，您都可以绘制系统响应，以检查需要验证设计的系统性能的任何方面。<ul>
<li>使用 <strong>Control System Tuner</strong>来进行调优和验证。</li>
<li>使用命令行来进行调优和验证。</li>
</ul>
</li>
</ol>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>​    在模型中配置相关的线性化分析点类型。分析点类型有以下几种，参见<a href="https://ww2.mathworks.cn/help/slcontrol/ug/specify-model-portion-to-linearize.html" target="_blank" rel="noopener">官方说明</a>。</p>
<ul>
<li><p>Input perturbation:  指定信号的附加输入，反映的是从输入点到输出点的闭环响应特性</p>
<p><img src="/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/analysis_pt_u_in.png" alt></p>
</li>
<li><p>Output measurement: 在信号处进行测量</p>
<p><img src="/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/analysis_pt_u_out.png" alt></p>
</li>
<li><p>Loop break: 指定一个环路断开，用于中断某个信号</p>
<p><img src="/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/analysis_pt_u_break.png" alt></p>
</li>
<li><p>Open-loop input: 指定位置前环路中断的输入信号，反映的是开环的输入</p>
<p><img src="/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/analysis_pt_u_in_break.png" alt></p>
</li>
<li><p>Open-loop output: 指定位置后的环路中断的信号测量</p>
<p><img src="/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/analysis_pt_u_out_break.png" alt></p>
</li>
<li><p>Loop transfer function: 指定在环路中断后跟输入扰动之前的输出测量值。</p>
<p><img src="/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/analysis_pt_u_looptf.png" alt></p>
</li>
<li><p>Sensitivity function:指定输入扰动后跟输出测量值</p>
<p><img src="/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/analysis_pt_u_sens.png" alt></p>
</li>
<li><p>Complementary sensitivity function:指定输出测量后跟输入扰动</p>
<p><img src="/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/analysis_pt_u_csens.png" alt></p>
<p>需要在模型中配置清楚扰动输入点和测量点。</p>
</li>
</ul>
<h3 id="配置调优器"><a href="#配置调优器" class="headerlink" title="配置调优器"></a>配置调优器</h3><ul>
<li><p>打开调优器，在Simulink 的编辑栏选择`Analysis -&gt; Control Design -&gt; Control System Tuner即可打开调优器。</p>
</li>
<li><p>配置需要调节的模块。在调优器编辑栏选择<code>TUNING -&gt; Select Blocks</code>,打开选择器，选择需要调节的模块，再选择底部按钮<code>Add Blocks</code>来勾选模型中需要调节的模块。例程中选择如下图所示</p>
<p><img src="/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/tune_block_select.png" alt></p>
</li>
<li><p>配置调优目标。一般需要包括跟踪特性，输入的稳定裕度，输出稳定裕度以及限制闭环的快速动态和急剧瞬变特性。</p>
<ul>
<li><p>跟踪特性配置：在调优工具状态栏选择<code>New Goal -&gt; Step Tracking Goal</code>，打开阶跃跟踪目标，分别配置阶跃响应的输入和输出，并配置超调比例，如下图所示。</p>
<p><img src="/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/step_goal.jpg" alt></p>
</li>
<li><p>输入输出的稳定裕度配置：在调优工具状态栏选择<code>New Goal -&gt; Minimum stability margins</code>，打开稳定裕度配置窗口，分别配置输入信号端口及其增益裕度和相位裕度，如下图所示。</p>
<p><img src="/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/input_margin_goal.jpg" alt></p>
<p><img src="/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/output_margin_goal.jpg" alt></p>
</li>
<li><p>限制闭环快速动态及急动特性：在调优工具状态栏选择<code>New Goal -&gt; Constraint on closed-loop dynamics</code>，打开极点配置窗口，对最大固有频率进行设置，如下图所示。</p>
<p><img src="/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/pole_goal.jpg" alt></p>
</li>
</ul>
</li>
</ul>
<p>可根据系统设计需求进行其他配置。</p>
<h3 id="调优并查看报告"><a href="#调优并查看报告" class="headerlink" title="调优并查看报告"></a>调优并查看报告</h3><p> 配置完成后，在调优器编辑界面点击<strong>Tune</strong>,开始自动进行参数调优工作。调优完成后，可以点击调优界面右下角的<code>Tuning Report</code>查看报告，如下图所示。最终优化结果Soft goal 越接近1，表示效果越好，偏差越小。</p>
<p><img src="/SSSnow.github.io/2020/03/10/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%8A%82%E4%B9%8BSYSTUNE%E7%9A%84%E4%BD%BF%E7%94%A8/report.png" alt>    </p>
<h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><p>调优完成后，在调优器界面选择<code>CONTROL SYSTEM -&gt; update blocks</code>，直接将调优参数更新到模型中，再在模型中进行仿真查看结果。</p>
]]></content>
      <categories>
        <category>Simulink学习</category>
      </categories>
      <tags>
        <tag>控制系统</tag>
        <tag>SYSTUNE</tag>
        <tag>MATLAB2018b</tag>
      </tags>
  </entry>
  <entry>
    <title>模型优化之参数校准</title>
    <url>/SSSnow.github.io/2020/03/08/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96%E4%B9%8B%E5%8F%82%E6%95%B0%E6%A0%A1%E5%87%86/</url>
    <content><![CDATA[<blockquote>
<p>要好好珍惜自己的名字，记得自己是谁</p>
<p>便知道自己要做什么，要走什么样的路</p>
</blockquote>
<p><img src="/SSSnow.github.io/2020/03/08/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96%E4%B9%8B%E5%8F%82%E6%95%B0%E6%A0%A1%E5%87%86/header.jpg" alt></p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>​    本文主要记录模型优化方法中的参数校准。利用simulink中的parameter estimation工具箱，梳理工作流，并以官方的伺服电机作为学习的例子。</p>
<a id="more"></a>
<h2 id="模型校准工作流"><a href="#模型校准工作流" class="headerlink" title="模型校准工作流"></a>模型校准工作流</h2><p>​    一个模型主要由许多定义好的参数组成，由于厂家一般提供的数据均为约数，由此建出来的模型离实际相差甚远，所以处理摸型校准的过程其实就是对参数校准的过程。参数校准主要涉及到以下几步。</p>
<ul>
<li>为系统收集实验对象的测试输入输出数据</li>
<li>指出需要进行校准的参数</li>
<li>配置参数估计器并运行一个合适的估计算法</li>
<li>根据其他测试数据集验证结果，并在必要时重复上述步骤</li>
</ul>
<h2 id="参数估计器的使用"><a href="#参数估计器的使用" class="headerlink" title="参数估计器的使用"></a>参数估计器的使用</h2><p>在 Simulink Design Optimization 中提供了一个 Parameter Estimation Tool( 参数估计器 ).</p>
<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>在开始参数估计前，我们需要准备两组数据集，分别是估计数据集，校验数据集。</p>
<p>数据集特点：</p>
<ul>
<li>包含输入输出数据</li>
<li>输入数据为方波</li>
<li>输入输出数据格式：<1, 1 signal point></1,></li>
<li>时间周期为：0.005s/200Hz</li>
</ul>
<p>采集完数据之后，制作数据集，包括估计数据集和校验数据集。以下脚本为制作输入输出信息的txt文档。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 处理实验数据</span></span><br><span class="line"><span class="comment">% 1.获取采样输出数据</span></span><br><span class="line">data_op = get(est_output_value,<span class="string">'Data'</span>);</span><br><span class="line">data_ip = get(est_ip,<span class="string">'Data'</span>);</span><br><span class="line">len = <span class="built_in">length</span>(data_ip);</span><br><span class="line">dt = <span class="number">0.005</span>;</span><br><span class="line">time = <span class="number">0</span>:dt:(len<span class="number">-1</span>)*dt;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 2.将数据写入.txt文件</span></span><br><span class="line">fid = fopen(<span class="string">'experiment_op.txt'</span>,<span class="string">'wt'</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">1</span>:len</span><br><span class="line">    fprintf(fid,<span class="string">'%f'</span>,time(<span class="built_in">i</span>));</span><br><span class="line">    fprintf(fid,<span class="string">'    %f\n'</span>,data_op(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fclose(fid);</span><br><span class="line"></span><br><span class="line">fid = fopen(<span class="string">'experiment_ip.txt'</span>,<span class="string">'wt'</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">1</span>:len</span><br><span class="line">    fprintf(fid,<span class="string">'%f'</span>,time(<span class="built_in">i</span>));</span><br><span class="line">    fprintf(fid,<span class="string">'    %f\n'</span>,data_ip(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fclose(fid);</span><br></pre></td></tr></table></figure>
<h3 id="配置参数校准工具"><a href="#配置参数校准工具" class="headerlink" title="配置参数校准工具"></a>配置参数校准工具</h3><p>在官方给的例子中使用指令打开了配置好的参数估计器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sdotool( slResolve(&#39;spe_servomotor_sdosession&#39;, &#39;spe_servomotor&#39;) );</span><br></pre></td></tr></table></figure>
<p>这里对指令进行详解一下，也算是对MATLAB指令工具的学习吧。</p>
<ul>
<li><p><strong>sdotool</strong></p>
<ul>
<li>指令功能：打开响应优化工具箱<ul>
<li>可以指定设计需求，比如时域响应、频域响应</li>
<li>合并参数不确定性以验证设计的鲁棒性</li>
<li>找到最具影响的参数进行优化(使用Sensitivity Analysis tool)</li>
<li>优化模型参数并监视优化过程</li>
</ul>
</li>
<li>指令格式：sdotool(‘modelname’)</li>
<li>其他启动方式：在simulink模型编辑器中选择 <strong>Analysis</strong> &gt; <strong>Response Optimization</strong>.</li>
</ul>
</li>
<li><p><strong>slResolve</strong></p>
<ul>
<li><p>该指令为一个内置函数，函数原型如下</p>
</li>
<li><pre><code class="lang-matlab">function [val,mdl] = slResolve(varName,mdl,cmd)
</code></pre>
</li>
<li><p>其中varName: 需要求解的变量名字，即<code>spe_servomotor_sdosession</code>,该文件存在模型空间下，mdl:即为所要优化的模型， cmd:{‘variable’,’context’} 默认为’variable’</p>
</li>
<li><p>该指令自动化处理已有模型配置的数据，为优化做准备。</p>
</li>
</ul>
<p>对于一般使用者来说，这样处理并不好用，特别是初学者，下面将以初学者的角度，来一步一步启动这个参数优化器。</p>
<ul>
<li><p>启动参数参数校准工具, 在模型编辑器窗口选择<code>Analysis -&gt; Parameter Eestimation...</code></p>
</li>
<li><p>添加实验数据，在Parameter Estimation编辑窗口选择<code>New Experiment</code>,即可打开实验数据编辑窗口</p>
<p><img src="/SSSnow.github.io/2020/03/08/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96%E4%B9%8B%E5%8F%82%E6%95%B0%E6%A0%A1%E5%87%86/new_experiment.png" alt></p>
<p>分别导入前期准备好的数据集，选择<strong>plot</strong>并点击ok，完成实验数据导入，结果如下图所示。以相同的方式再导入校验数据集。</p>
<p><img src="/SSSnow.github.io/2020/03/08/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96%E4%B9%8B%E5%8F%82%E6%95%B0%E6%A0%A1%E5%87%86/import_exp.png" alt></p>
</li>
<li><p>配置需要校准的参数，在Parameter Estimation编辑器中，选择<code>Select Parameters -&gt; 点击select parameters</code>，选择模型中所需要校准的参数，</p>
<p><img src="/SSSnow.github.io/2020/03/08/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96%E4%B9%8B%E5%8F%82%E6%95%B0%E6%A0%A1%E5%87%86/select_parameters.png" alt></p>
<p>然后再配置参数的最大最小值，保证参数的屋里特性处于合理范围内，如下图所示</p>
<p><img src="/SSSnow.github.io/2020/03/08/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96%E4%B9%8B%E5%8F%82%E6%95%B0%E6%A0%A1%E5%87%86/parameters_limit.png" alt></p>
</li>
<li><p>查看仿真结果，在Parameter Estimation编辑器中，选择<code>Plot Model Response</code>,查看响应结果。</p>
</li>
<li><p>估计参数，在Parameter Estimation编辑器中，选择<code>Estimate</code>,开始执行估计，需要等待一段时间，估计结果如下。</p>
<p><img src="/SSSnow.github.io/2020/03/08/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96%E4%B9%8B%E5%8F%82%E6%95%B0%E6%A0%A1%E5%87%86/result.png" alt></p>
</li>
<li><p>最后保存估计出来的参数。</p>
</li>
</ul>
</li>
</ul>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>主要处理数据合理性，将数据建立在合理的。</li>
<li>关于初始条件，可以更具模型特定状态进行初始化。</li>
<li>关于实验数据，如果存在一定偏差或者噪声的情况下，应事先做好滤波处理。</li>
</ol>
]]></content>
      <categories>
        <category>Simulink学习</category>
      </categories>
      <tags>
        <tag>参数校准，模型优化，matlab2018b</tag>
      </tags>
  </entry>
  <entry>
    <title>Simulink Test 笔记2</title>
    <url>/SSSnow.github.io/2020/02/22/Simulink-Test-%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<blockquote>
<p>沿着这条路一直往前走，在不远的地方就有一个路口，你可以左转也可以朝前走，但是不能停留。</p>
</blockquote>
<p><img src="/SSSnow.github.io/2020/02/22/Simulink-Test-%E7%AC%94%E8%AE%B02/header.jpg" alt></p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本篇主要介绍基线测试，验证模型是否满足要求，并将模拟结果与基线数据进行比较。</p>
<a id="more"></a>
<h2 id="启动测试管理器"><a href="#启动测试管理器" class="headerlink" title="启动测试管理器"></a>启动测试管理器</h2><p>​    打开构建好的模型，以本人建的电动机+螺旋桨模型为例。打开模型，在工具栏中选择Analysis(分析)-&gt; Test Manager(测试管理器)， 来启动测试管理器。</p>
<p><img src="/SSSnow.github.io/2020/02/22/Simulink-Test-%E7%AC%94%E8%AE%B02/TestManager.png" alt></p>
<h2 id="根据需求验证模型行为"><a href="#根据需求验证模型行为" class="headerlink" title="根据需求验证模型行为"></a>根据需求验证模型行为</h2><p>创建一个测试文件结构，向其中添加一个测试用例，然后运行测试。</p>
<h3 id="创建测试文件结构"><a href="#创建测试文件结构" class="headerlink" title="创建测试文件结构"></a>创建测试文件结构</h3><ul>
<li>将当前文件家设置为可写文件夹。</li>
<li>创建一个测试文件。从“Test Manager(测试管理器)”工具栏中选择“New(新建测试文件)”。</li>
<li>将文件命名为‘Tutorial Tests’,并保存。测试文件包含一个或多个测试套件，测试套件包含一个或多个测试用例。使用此结构组织相关测试。此结构还可以帮助单独运行测试，或者在文件或套件中运行所有测试。</li>
<li>默认的测试用例是基线测试。将其转换未模拟测试。选择测试用例，并从上下文菜单中选择 Convert to Simulation Test, 然后单击Yes以确认转换。</li>
<li>将测试重命名， 可以在测试浏览器中使用上下文菜单并选择Rename.或者单击该名称并在测试用例中键入一个新的名称。</li>
</ul>
<h3 id="为测试用例分配模型"><a href="#为测试用例分配模型" class="headerlink" title="为测试用例分配模型"></a>为测试用例分配模型</h3><p>在SYSTEM UNDER TEST下的model 中指定测试模型。</p>
<h3 id="捕捉基线"><a href="#捕捉基线" class="headerlink" title="捕捉基线"></a>捕捉基线</h3><p>在基线测试中，将模拟的输出与预期的输出进行比较。可以将Test Manager 中的输出捕获未Excel文件或MAT-file, 或者可以向测试用例添加一个外部文件作为基线。</p>
<ul>
<li>在测试用例中，在 <strong>Baseline Criteria</strong> 中点击 <strong>Capture</strong>.</li>
<li>将<strong>File format</strong>设置为<code>Excel</code>,</li>
</ul>
<h3 id="运行测试并检查结果"><a href="#运行测试并检查结果" class="headerlink" title="运行测试并检查结果"></a>运行测试并检查结果</h3><ul>
<li>在测试管理器工具栏，单击<code>运行</code>，此时左侧导航栏将从<code>Test Browser</code>更改为<code>Results and Artifacts</code> 窗格。</li>
</ul>
<h2 id="创建并运行基线测试"><a href="#创建并运行基线测试" class="headerlink" title="创建并运行基线测试"></a>创建并运行基线测试</h2>]]></content>
      <categories>
        <category>Simulink Test</category>
      </categories>
      <tags>
        <tag>Simulink， test</tag>
      </tags>
  </entry>
  <entry>
    <title>Simulink Test 笔记1</title>
    <url>/SSSnow.github.io/2020/02/22/Simulink-Test-%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<blockquote>
<p>路漫漫其修远兮， 吾将上下而求索</p>
</blockquote>
<p><img src="/SSSnow.github.io/2020/02/22/Simulink-Test-%E7%AC%94%E8%AE%B01/header.jpg" alt></p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>​    本篇主要记录在simulink 中所有支持的测试计划。</p>
<a id="more"></a>
<h2 id="Test-case-设计事项"><a href="#Test-case-设计事项" class="headerlink" title="Test case 设计事项"></a>Test case 设计事项</h2><ul>
<li>测试的模型或者模型组件</li>
<li>组件是否集成了代码，如C代码</li>
<li>是否需要在多个环境中运行测试，如在嵌入式平台上使用生成的代码</li>
<li>测试目的是什么，比如需求验证，数据比较或者快速测试设计</li>
<li>测试是否使用多个参数值</li>
<li>是否需要全覆盖的结果</li>
</ul>
<h2 id="测试系统"><a href="#测试系统" class="headerlink" title="测试系统"></a>测试系统</h2><p>​    可以测试整个模型，也可以将重点放在模型组件上。可以为整合模型创建测试用例或者使用测试工具。</p>
<ul>
<li><p>测试工具可以隔离整个模型以进行测试。可以向测试工具中添加验证块和逻辑，以保证著模型的清晰。还可以添加其他模拟环境的模型。</p>
<ul>
<li>测试工具可是将模型组件从单元测试的主模型中分离出来。</li>
</ul>
<p>测试工具与组件或整个模型相关联。测试工具包含组件的副本或对模型的引用，以及为测试目的而防止的输入和输出。可以向测试工具添加其他组件。可以用模型文件保存工具，也可以将其保存在与模型分离的文件中。不管测试工具实在模型内部还是外部，它的工作原理都是一样的。还可以指定是否在模型和测试工具之间同步更改。</p>
</li>
</ul>
<h2 id="测试目标"><a href="#测试目标" class="headerlink" title="测试目标"></a>测试目标</h2><p>​    在开始测试之前，了解你的目标。</p>
<h3 id="需求验证"><a href="#需求验证" class="headerlink" title="需求验证"></a>需求验证</h3><p>​    根据需求评估模型行为。比如， 为传输控制器模型创建测试用例，或者为控制器组件创建测试线束。并通过方法验证模型是否满足需求。</p>
<ul>
<li>在模型或测试工具中创建验证语句</li>
<li>在模型或测试工具中包含模型验证块</li>
<li>在测试用例中捕获模拟输出，并将模拟输出与基线数据进行对比。</li>
</ul>
<p>​      运行测试用例并在测试管理器中捕获结果。可以将测试用例链接到Simulink需求文档中，并与其需求对应，同时也可以使用Simulink Coverage收集覆盖率，并为更多场景添加测试用例。</p>
<h3 id="数据比较"><a href="#数据比较" class="headerlink" title="数据比较"></a>数据比较</h3><p>​    使用Test Manager可以将模拟结果与迹象数据或者其他模拟进行比较，无论哪种情况，都必须指定捕获的信号。</p>
<p>​    在基线测试中，建立基线数据，只是预期的输出。也可以手动定义基线数据，从Excel或MAT文件导入基线数据，或者从模拟中捕获基线数据。</p>
<p>​    在等效性测试中，比较两种模拟以确定他们是否等价。比如，可以比较两个求解器的结果，或者比较正常模式和软件回路（SIL）模式下的模拟结果。通过连续运行测试，探索不同数值或校准数据集的影响。</p>
<p>​    对于对比测试，可以通过指定值或者时间公差来接收在技术上可接收的差异范围内的结果。可以在运行测试之前指定此公差，或者在运行测试之后查看结果并调整公差。</p>
<h3 id="模拟测试"><a href="#模拟测试" class="headerlink" title="模拟测试"></a>模拟测试</h3><p>​    如果测试只需要一个模型来模拟来判断有没有错误，那么可以运行一个模拟测试。如果模型仍在开发中，或者有一个包含输入、评估和记录相关数据的现有测试模型，那么模拟测试是有用的。</p>
]]></content>
      <categories>
        <category>Simulink Test</category>
      </categories>
      <tags>
        <tag>Simulink， test</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈航空认证标准(Ⅲ)</title>
    <url>/SSSnow.github.io/2020/02/12/%E8%B0%88%E8%B0%88%E8%88%AA%E7%A9%BA%E8%AE%A4%E8%AF%81%E6%A0%87%E5%87%86-2/</url>
    <content><![CDATA[<blockquote>
<p>逆风的方向，更适合飞翔</p>
<p>不怕千万人阻挡，只怕自己投降</p>
</blockquote>
<p><img src="/SSSnow.github.io/2020/02/12/%E8%B0%88%E8%B0%88%E8%88%AA%E7%A9%BA%E8%AE%A4%E8%AF%81%E6%A0%87%E5%87%86-2/header.jpg" alt></p>
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本文主要详细的讲述下mathworks下DO178C的工作流。</p>
<a id="more"></a>
<h2 id="基于模型设计的DO178C工作流"><a href="#基于模型设计的DO178C工作流" class="headerlink" title="基于模型设计的DO178C工作流"></a>基于模型设计的DO178C工作流</h2><h3 id="需求工作流"><a href="#需求工作流" class="headerlink" title="需求工作流"></a>需求工作流</h3>]]></content>
      <categories>
        <category>航空航天</category>
      </categories>
      <tags>
        <tag>mathworks</tag>
        <tag>simulink</tag>
        <tag>DO178C</tag>
        <tag>workflow</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈航空认证标准(Ⅱ)</title>
    <url>/SSSnow.github.io/2020/02/11/%E8%B0%88%E8%B0%88%E8%88%AA%E7%A9%BA%E8%AE%A4%E8%AF%81%E6%A0%87%E5%87%86-1/</url>
    <content><![CDATA[<blockquote>
<p>秋风起兮白云飞 草木落兮雁南归</p>
<p>兰有秀兮菊有芳 怀佳人兮不能忘</p>
</blockquote>
<p><img src="/SSSnow.github.io/2020/02/11/%E8%B0%88%E8%B0%88%E8%88%AA%E7%A9%BA%E8%AE%A4%E8%AF%81%E6%A0%87%E5%87%86-1/header.jpg" alt></p>
<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>​    本文主要谈谈DO-178C的相关内容，及其借助<code>simulink</code>的开发流程。</p>
<a id="more"></a>
<h2 id="DO-178C主要内容"><a href="#DO-178C主要内容" class="headerlink" title="DO-178C主要内容"></a>DO-178C主要内容</h2><p>​    DO-178C提供的是一种结构化的机载软件设计保证标准，它是基于目标，面向过程和活动的。目前国内正式使用的仍然是DO-178B，C919上使用的就是它。虽然没有发布正式通告，但实际上在新型涡桨支线飞机MA700上已经开始使用DO-178C了。</p>
<h3 id="DO-178C中的软件过程"><a href="#DO-178C中的软件过程" class="headerlink" title="DO-178C中的软件过程"></a>DO-178C中的软件过程</h3><p>​    首先了解下软件过程，如下图所示</p>
<pre class="mermaid">    graph LR
    title[软件计划过程]
    A1[软件开发计划SDP]-->A2[软件验证计划SVP]
    A2-->A3[软件配置管理计划SCMP]
    A3-->A4[软件质量保证计划SQAP]
    A4-->A5[软件合格审定计划PASC]
    title1[软件开发流程]
    A[软件需求过程] --> B[软件设计过程]
    B-->C[软件编码过程]
    C-->D[软件集成过程]
    title2[后期综合过程]
    E[软件验证过程]-->F[软件配置管理过程]
    F-->G[软件质量保证过程]
    G-->H[合格审定联络过程]</pre>

<h3 id="软件生命周期"><a href="#软件生命周期" class="headerlink" title="软件生命周期"></a>软件生命周期</h3><p>​    DO-178C把软件生命周期划分为若干目标，主要包括需求、设计、编码、集成、测试验证等过程，并在在计划中应详细说明采用软件的生命周期模型，包括过程之间的反馈关系、输入输出以及转入转出准则等信息。</p>
<p>主要针对以下过程进行拆分</p>
<ul>
<li>软件计划过程<ul>
<li>计划过程有7个目标，主要针对上图中5个计划的内容要求以及编制标准文件。</li>
</ul>
</li>
<li>软件开发过程<ul>
<li>需求<ul>
<li>接受系统分配软件的需求，并把系统分配给软件的需求进行进一步分解得到软件高级需求的过程</li>
<li>什么是系统分配给软件的需求<ul>
<li>系统需求确定后，在系统架构设计时会明确是采用硬件实现还是采用软件+硬件的模式来实现。</li>
<li>如果是后者，还需要确定哪些需求由软件来实现，哪些需求由硬件实现，如果某个需求确定下来由软件来实现，那它就称为系统分配给软件的需求</li>
</ul>
</li>
<li>什么是软件高级需求和软件低级需求？<ul>
<li>软件高级需求就是软件人员拿到系统分配给软件的需求后，进行进一步精化后得到的软件需求。</li>
<li>低级需求，就是我们平常说的设计。在DO-178C中，概要设计被称为software architecture,详细设计则被称为low level requirements。把详细设计文档的内容进行条目化，以需求条目的形式表达出来并逐条与高级需求进行追踪。</li>
</ul>
</li>
</ul>
</li>
<li>设计<ul>
<li>需要保留需求软件源码双向追踪列表。</li>
<li>派生需求需标明原因，并反馈至安全性评估过程</li>
</ul>
</li>
<li>编码<ul>
<li>在编码过程中需要把需求和代码对应起来。</li>
</ul>
</li>
<li>集成</li>
</ul>
</li>
<li>软件验证<ul>
<li>DO-178C对验证过程的说明，验证过程是贯穿于整个软件生命周期过程的。</li>
</ul>
</li>
<li>软件配置管理过程<ul>
<li>DO-178C把所有将会被配置管理过程管理起来的数据项（这里成为配置项）分为两类，一类比较重要的数据施加更多的管理活动约束，而对于不太重要的数据施加的管理活动约束就少一些。</li>
</ul>
</li>
</ul>
<p>生命周期环境变化的控制方法是一旦发生更改，和软件数据的更改一样走一个更改流程，通过流程中的更改影响分析环节来确定哪些数据需要返工。同时，这样的更改应同时报告主机商。</p>
<h2 id="mathworks中提供的DO-178C工作流"><a href="#mathworks中提供的DO-178C工作流" class="headerlink" title="mathworks中提供的DO-178C工作流"></a>mathworks中提供的DO-178C工作流</h2><p>​    这里主要讲的是基于模型开发，到代码自动生成的检验过程。在这先提几个概念，将在后续文章中细化具体流程。</p>
<p>​    在此工作流的输入端分别是如下几点：</p>
<ul>
<li><code>simulink</code> 需求池</li>
<li>仿真案例分析</li>
<li>设计的限制条件<ul>
<li>等效类</li>
<li>边界值</li>
<li>派生需求<ul>
<li>测试环境设定</li>
<li>模型标准</li>
<li>自动编程设定</li>
<li>编码标准</li>
<li>验证对象设定</li>
<li>SIL 测试案例分析</li>
<li>文档模板脚本</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>通过以上输入实现基于模型设计的DO-178C工作流，为飞行软件的适航提供保证。</p>
]]></content>
      <categories>
        <category>航空航天</category>
      </categories>
      <tags>
        <tag>DO-178C，DO-254，DO Qualification Kit</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈航空认证标准(Ⅰ)</title>
    <url>/SSSnow.github.io/2020/02/11/%E8%B0%88%E8%B0%88%E8%88%AA%E7%A9%BA%E8%AE%A4%E8%AF%81%E6%A0%87%E5%87%86/</url>
    <content><![CDATA[<blockquote>
<p>谁看见过风？我和你，都不曾看见过。但是当树叶颤动之时，就代表风正吹拂而过。风啊，请展开羽翼，将它送达你的身边!</p>
</blockquote>
<p><img src="/SSSnow.github.io/2020/02/11/%E8%B0%88%E8%B0%88%E8%88%AA%E7%A9%BA%E8%AE%A4%E8%AF%81%E6%A0%87%E5%87%86/header.jpg" alt></p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>​    这里主要讨论DO-178B, DO-254标准，解释其背景，意义，以及是怎么工作的。</p>
<a id="more"></a>
<h2 id="什么是DO-178B"><a href="#什么是DO-178B" class="headerlink" title="什么是DO-178B"></a>什么是DO-178B</h2><p>​    在维基百科中，DO-178B全称<strong>Software Considerations in Airborne Systems and Equipment Certification</strong>,中文名称为《机载系统和设备认证中的软件注意事项》，一般称之为DO-178B标准。是用来处理某些机载系统中使用的安全关键软件的安全性指导方针，是用于认证商用航空电子软件系统的国际安全标准。</p>
<h2 id="DO-178B的背景及发展"><a href="#DO-178B的背景及发展" class="headerlink" title="DO-178B的背景及发展"></a>DO-178B的背景及发展</h2><p>​    从二十世纪八十年代开始，航空器和发动机上所用的机载系统和设备中，软件的使用量迅速增加，为了保证其安全性，形成一个工业可接受的标准，以满足适航性要求，于是DO-178诞生了。</p>
<p>​    1982年，RTCA和EUROCAE正式发布了DO-178。这是民用航空机载软件开发中安全保证的一个里程碑。这个标准有二个称谓，在美国（RTCA）被称为DO-178，在欧洲（EUROCAE）被称为ED-12。其实，这完全是同一个标准。</p>
<p>​    在接下来的几年里，依据DO-178进行开发和认证的经验表明，DO-178还不太完善，需要修订。1985年，新的版本DO-178A就问世了，与之等价的欧洲版本为ED-12A。</p>
<p>​    DO-178A有一个很大的特点，它是面向软件的开发技术和开发方法的。但是，软件的开发技术更新很快，新的技术和方法层出不穷，日新月异。这样，DO-178A很快就显得跟不上步伐了。为了解决这个问题，RTCA决定再次修订这个标准。为了避免重蹈覆辙，RTCA和EUROCAE的专家们改变了制订这个标准的原则，从原来的“面向开发技术和方法”改成“面向目标”和“面向进程”。这样，他们决定完全重写这个标准。终于，一个相对稳定的版本DO-178B在1992年问世了，至今还在应用中。</p>
<p>　　现在，DO-178B早就成了国际公认的民用航空机载软件的开发标准。一架民用飞机（相对军用飞机而言）不经过“民航标准体系”的适航认证，是不可以飞行的。而这个“民航标准体系”中，针对机载软件适航认证的，就是DO-178B标准。由此可见DO-178B的重要性。</p>
<p><img src="/SSSnow.github.io/2020/02/11/%E8%B0%88%E8%B0%88%E8%88%AA%E7%A9%BA%E8%AE%A4%E8%AF%81%E6%A0%87%E5%87%86/178BTimeAxis.png" alt="时间轴"></p>
<h2 id="DO-178B标准主要内容"><a href="#DO-178B标准主要内容" class="headerlink" title="DO-178B标准主要内容"></a>DO-178B标准主要内容</h2><p>​    DO-178B标准主要包含3个方面的标准。</p>
<ul>
<li>软件生命周期过程的目标</li>
<li>为满足上述目标要进行的活动</li>
<li>证明上述目标已经达到的证据，即软件生命周期数据</li>
</ul>
<p>在DO-178B中，目标、过程、数据是软件适航的基本要求。在2012年，DO-178B升级为DO-178C，来适应技术的发展在软件工具验证、基于模型的开发和验证、面向对象编程、形式化方法等方面提出了新的要求。在2013年，FAA正式将DO-178C等一系列文档确认为”可受的符合性方法”。</p>
<p><img src="/SSSnow.github.io/2020/02/11/%E8%B0%88%E8%B0%88%E8%88%AA%E7%A9%BA%E8%AE%A4%E8%AF%81%E6%A0%87%E5%87%86/178CTimeAxis.png" alt></p>
<p>​    在主流的航空开发套件中，也开始增加了DO-178C的质量认证包，例如<code>simulink</code>中的 <code>DO Qualification Kit</code>也有相应的校验工具。在下一篇文章中将主要谈谈DO-178C的相关内容。</p>
]]></content>
      <categories>
        <category>航空航天</category>
      </categories>
      <tags>
        <tag>DO-178B，DO-254，飞行器质量认证</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/SSSnow.github.io/2020/02/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
